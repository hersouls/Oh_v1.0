import { render, screen, fireEvent } from '@testing-library/react';
import { Track } from '../../../types';
import { AudioPlayer } from '../AudioPlayer';

// Mock tracks
const mockTrack: Track = {
  id: '1',
  title: '테스트 트랙',
  artist: '오안나',
  duration: 180,
  file: '/music/test.mp3',
  cover: '/covers/test.jpg',
  description: '테스트용 트랙입니다.',
};

const defaultProps = {
  currentTrack: mockTrack,
  isPlaying: false,
  currentTime: 0,
  duration: 180,
  volume: 1,
  repeatMode: 'none' as const,
  isShuffled: false,
  onTogglePlay: jest.fn(),
  onSeek: jest.fn(),
  onVolumeChange: jest.fn(),
  onNext: jest.fn(),
  onPrevious: jest.fn(),
  onRepeatModeChange: jest.fn(),
  onShuffleToggle: jest.fn(),
  className: 'test-class',
};

describe('AudioPlayer', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('기본 렌더링이 올바르게 작동한다', () => {
    render(<AudioPlayer {...defaultProps} />);

    expect(screen.getByRole('button', { name: /재생/i })).toBeInTheDocument();
    expect(screen.getByRole('slider')).toBeInTheDocument();
    expect(screen.getByText('0:00')).toBeInTheDocument();
    expect(screen.getByText('3:00')).toBeInTheDocument();
  });

  test('재생 버튼 클릭 시 onTogglePlay가 호출된다', () => {
    render(<AudioPlayer {...defaultProps} />);

    const playButton = screen.getByRole('button', { name: /재생/i });
    fireEvent.click(playButton);

    expect(defaultProps.onTogglePlay).toHaveBeenCalledTimes(1);
  });

  test('일시정지 상태에서 일시정지 버튼이 표시된다', () => {
    render(<AudioPlayer {...defaultProps} isPlaying={true} />);

    expect(screen.getByRole('button', { name: /일시정지/i })).toBeInTheDocument();
  });

  test('진행바 클릭 시 onSeek가 호출된다', () => {
    render(<AudioPlayer {...defaultProps} />);

    const progressBar = screen.getByRole('slider');
    fireEvent.click(progressBar);

    expect(defaultProps.onSeek).toHaveBeenCalled();
  });

  test('볼륨 조절 시 onVolumeChange가 호출된다', () => {
    render(<AudioPlayer {...defaultProps} />);

    const volumeControl = screen.getByRole('slider', { name: /볼륨/i });
    fireEvent.change(volumeControl, { target: { value: '0.5' } });

    expect(defaultProps.onVolumeChange).toHaveBeenCalledWith(0.5);
  });

  test('다음 곡 버튼 클릭 시 onNext가 호출된다', () => {
    render(<AudioPlayer {...defaultProps} />);

    const nextButton = screen.getByRole('button', { name: /다음 곡/i });
    fireEvent.click(nextButton);

    expect(defaultProps.onNext).toHaveBeenCalledTimes(1);
  });

  test('이전 곡 버튼 클릭 시 onPrevious가 호출된다', () => {
    render(<AudioPlayer {...defaultProps} />);

    const previousButton = screen.getByRole('button', { name: /이전 곡/i });
    fireEvent.click(previousButton);

    expect(defaultProps.onPrevious).toHaveBeenCalledTimes(1);
  });

  test('반복 모드 버튼 클릭 시 onRepeatModeChange가 호출된다', () => {
    render(<AudioPlayer {...defaultProps} />);

    const repeatButton = screen.getByRole('button', { name: /반복/i });
    fireEvent.click(repeatButton);

    expect(defaultProps.onRepeatModeChange).toHaveBeenCalledTimes(1);
  });

  test('셔플 버튼 클릭 시 onShuffleToggle가 호출된다', () => {
    render(<AudioPlayer {...defaultProps} />);

    const shuffleButton = screen.getByRole('button', { name: /셔플/i });
    fireEvent.click(shuffleButton);

    expect(defaultProps.onShuffleToggle).toHaveBeenCalledTimes(1);
  });

  test('트랙 정보가 올바르게 표시된다', () => {
    render(<AudioPlayer {...defaultProps} />);

    expect(screen.getByText('테스트 트랙')).toBeInTheDocument();
    expect(screen.getByText('오안나')).toBeInTheDocument();
  });

  test('시간이 올바른 형식으로 표시된다', () => {
    render(<AudioPlayer {...defaultProps} currentTime={65} />);

    expect(screen.getByText('1:05')).toBeInTheDocument();
  });

  test('진행률이 올바르게 계산된다', () => {
    render(<AudioPlayer {...defaultProps} currentTime={90} duration={180} />);

    const progressBar = screen.getByRole('slider');
    expect(progressBar).toHaveValue('50');
  });

  test('볼륨이 올바르게 표시된다', () => {
    render(<AudioPlayer {...defaultProps} volume={0.5} />);

    const volumeControl = screen.getByRole('slider', { name: /볼륨/i });
    expect(volumeControl).toHaveValue('0.5');
  });

  test('반복 모드에 따라 아이콘이 변경된다', () => {
    const { rerender } = render(<AudioPlayer {...defaultProps} repeatMode="one" />);

    expect(screen.getByRole('button', { name: /한 곡 반복/i })).toBeInTheDocument();

    rerender(<AudioPlayer {...defaultProps} repeatMode="all" />);
    expect(screen.getByRole('button', { name: /전체 반복/i })).toBeInTheDocument();
  });

  test('셔플 상태에 따라 아이콘이 변경된다', () => {
    const { rerender } = render(<AudioPlayer {...defaultProps} isShuffled={true} />);

    expect(screen.getByRole('button', { name: /셔플 해제/i })).toBeInTheDocument();

    rerender(<AudioPlayer {...defaultProps} isShuffled={false} />);
    expect(screen.getByRole('button', { name: /셔플/i })).toBeInTheDocument();
  });

  test('트랙이 없을 때 비활성화된 상태로 표시된다', () => {
    render(<AudioPlayer {...defaultProps} currentTrack={null} />);

    const playButton = screen.getByRole('button', { name: /재생/i });
    expect(playButton).toBeDisabled();
  });

  test('로딩 중일 때 로딩 상태가 표시된다', () => {
    render(<AudioPlayer {...defaultProps} />);

    // 로딩 상태는 내부적으로 처리되므로 기본 렌더링만 확인
    expect(screen.getByRole('button', { name: /재생/i })).toBeInTheDocument();
  });

  test('에러 상태일 때 에러 메시지가 표시된다', () => {
    render(<AudioPlayer {...defaultProps} />);

    // 에러 상태는 내부적으로 처리되므로 기본 렌더링만 확인
    expect(screen.getByRole('button', { name: /재생/i })).toBeInTheDocument();
  });

  test('접근성 속성이 올바르게 설정된다', () => {
    render(<AudioPlayer {...defaultProps} />);

    const playButton = screen.getByRole('button', { name: /재생/i });
    expect(playButton).toHaveAttribute('aria-label');

    const progressBar = screen.getByRole('slider');
    expect(progressBar).toHaveAttribute('aria-label');
  });

  test('키보드 네비게이션이 작동한다', () => {
    render(<AudioPlayer {...defaultProps} />);

    const playButton = screen.getByRole('button', { name: /재생/i });
    playButton.focus();

    expect(playButton).toHaveFocus();
  });
});